import React from 'react';
import PropTypes from 'prop-types';
import { withStyles } from '@6thquake/react-material/styles';
import Divider from '@6thquake/react-material/Divider';
import TableBody from '@6thquake/react-material/TableBody';
import TableCell from '@6thquake/react-material/TableCell';
import TableHead from '@6thquake/react-material/TableHead';
import TableRow from '@6thquake/react-material/TableRow';
import { RadioButton } from '@6thquake/react-material/Radio';
import RadioGroup from '@6thquake/react-material/RadioGroup';
import Paper from '@6thquake/react-material/Paper';
import AwesomeTable from '@6thquake/react-material/Table/AwesomeTable';
import filter from '@6thquake/react-material/utils/filter';

import Grid from '@6thquake/react-material/Grid';
import classnames from 'classnames';
import SvgIcon from '@6thquake/react-material/SvgIcon';

function Icon(props) {
  return (
    <SvgIcon viewBox="0 0 269 230" {...props}>
      <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd" opacity="0.498697917">
        <g transform="translate(-926.000000, -336.000000)" fillRule="nonzero">
          <g transform="translate(926.000000, 336.000000)">
            <path
              d="M265.997937,157.706056 L247.635401,144.535519 C249.237854,137.151639 250.078485,129.479736 250.078485,121.598361 C250.078485,61.7679872 201.40069,13.2490893 141.374374,13.2490893 C120.726372,13.2490893 101.418126,18.9833789 84.9995498,28.9594718 L69.369065,17.7265483 C66.5582047,15.7103825 62.6440161,16.3649818 60.6212474,19.1404827 C58.5984788,21.9421676 59.2552219,25.8435792 62.0398124,27.859745 L74.097615,36.5266393 C68.423355,40.9779144 63.2219499,46.0052368 58.5722091,51.4776867 L38.712299,37.2336066 C34.1939067,33.9867942 27.8103642,35.007969 24.5529186,39.537796 C21.295473,44.041439 22.3199922,50.4041439 26.8646542,53.6509563 L46.9084524,68.0521403 C44.0713223,73.0009107 41.6282382,78.159153 39.6054695,83.553051 L20.5599208,69.8850182 C14.7543122,65.7217668 6.61069824,67.0571494 2.43381238,72.817623 C-1.74307348,78.6042805 -0.403317634,86.7213115 5.37602129,90.8845628 L33.221927,110.889117 C32.8804206,114.423953 32.6965326,118.011157 32.6965326,121.650729 C32.6965326,181.481102 81.3743281,230 141.400644,230 C172.451456,230 200.42871,217.038934 220.236081,196.248862 L237.28513,208.476776 C243.090739,212.640027 251.234353,211.304645 255.411239,205.544171 C259.588125,199.757514 258.248369,191.640483 252.46903,187.477231 L235.761486,175.484973 C238.729965,170.352914 241.251858,164.932832 243.353436,159.329463 L257.539086,169.515027 C260.770262,171.845401 265.314924,171.11225 267.652929,167.865437 C269.964665,164.566257 269.229113,160.03643 265.997937,157.706056 Z M5.00824517,28.9594718 C5.00824517,33.5291502 8.72483346,37.2336066 13.3094774,37.2336066 C17.8941214,37.2336066 21.6107097,33.5291502 21.6107097,28.9594718 C21.6107097,24.3897933 17.8941214,20.685337 13.3094774,20.685337 C8.72483346,20.685337 5.00824517,24.3897933 5.00824517,28.9594718 Z M231.821028,27.0218579 C231.821028,30.1888186 234.396765,32.7561475 237.574097,32.7561475 C240.75143,32.7561475 243.327167,30.1888186 243.327167,27.0218579 C243.327167,23.8548972 240.75143,21.2875683 237.574097,21.2875683 C234.396765,21.2875683 231.821028,23.8548972 231.821028,27.0218579 Z M219.947114,16.4959016 C220.26235,16.5220856 220.551317,16.5482696 220.840284,16.5482696 C225.01717,16.5482696 228.616122,13.4061931 229.088977,9.1643898 C229.588102,4.60837887 226.278117,0.549863388 221.733455,0.0523679417 C221.418218,0.0261839709 221.129251,0 220.840284,0 C216.663398,0 213.064446,3.1420765 212.591591,7.38387978 C212.092467,11.9137067 215.376182,15.9984062 219.947114,16.4959016 Z M214.903327,7.61953552 C215.209887,4.59679086 217.765921,2.29820743 220.814014,2.30418944 C221.024172,2.30418944 221.2606,2.30418944 221.470758,2.33037341 C223.046941,2.5136612 224.465506,3.27299636 225.463755,4.50364299 C226.462005,5.73428962 226.90859,7.2791439 226.750972,8.87636612 C226.444412,11.8991108 223.888377,14.1976942 220.840284,14.1917122 C220.630126,14.1917122 220.393699,14.1917122 220.183541,14.1655282 C218.607358,13.9822404 217.188793,13.2229053 216.190543,11.9922587 C215.192294,10.761612 214.719439,9.19057377 214.903327,7.61953552 Z"
              fill="#E3F2FD"
            />
            <path
              d="M56.0075292,92.1469729 C55.8796359,95.1925982 57.388777,98.059069 59.9466433,99.6714589 C62.5045097,101.309442 65.7529999,101.43741 68.4387596,100.029768 C71.1245192,98.6221258 72.8638684,95.8836224 72.9917617,92.8635906 C73.196391,88.1799819 69.5642208,84.212991 64.8577467,84.0082431 C60.1768513,83.8034952 56.2121585,87.4377707 56.0075292,92.1469729 Z"
              fill="#BBDEFB"
            />
            <path
              d="M62.0031693,92.8740827 C61.927619,94.5361905 63.211975,95.9212803 64.8740827,95.9968307 C66.5361905,96.072381 67.9212803,94.788025 67.9968307,93.1259173 C68.072381,91.4638095 66.788025,90.0787197 65.1259173,90.0031693 C63.4638095,89.927619 62.0535362,91.211975 62.0031693,92.8740827 Z"
              fill="#FFFFFF"
            />
            <path
              d="M86.990664,101.873093 L70,97.596143 L71.3661506,92 L88.3568145,96.276684 L86.990664,101.873093 Z M213.842234,115.968401 C213.659069,120.219578 216.903709,123.806508 221.090342,123.992497 C225.276975,124.178486 228.809446,120.883824 228.992611,116.632647 C229.175776,112.381471 225.931136,108.79454 221.744503,108.608551 C217.557871,108.395992 214.025399,111.690654 213.842234,115.968401 Z"
              fill="#BBDEFB"
            />
            <path
              d="M220.001823,116.872116 C219.944986,118.520402 221.223829,119.91292 222.872116,119.998177 C224.520402,120.055014 225.91292,118.776171 225.998177,117.127884 C226.055014,115.479598 224.776171,114.08708 223.127884,114.001823 C221.479598,113.944986 220.08708,115.223829 220.001823,116.872116 Z"
              fill="#FFFFFF"
            />
            <polygon
              fill="#BBDEFB"
              points="215.862862 120 203 119.695458 203.137138 114 216 114.304542"
            />
            <path
              d="M113.204985,126.478729 C117.362482,135.179912 171.070011,144.16766 181.581417,137.915313 C191.439128,132.053738 190.654695,107.513278 184.01316,101.313034 C177.476216,95.2430473 136.371914,87.4536654 124.814597,92.7681601 C118.800609,95.5035617 108.472238,116.657335 113.204985,126.478729 Z"
              fill="#FFFFFF"
            />
            <path
              d="M204.919845,113.552396 C204.919845,113.057475 204.893186,112.588603 204.839869,112.093682 C204.413331,107.5352 203.693547,104.904304 202.867128,103.419541 C201.080998,100.241628 192.630204,98.9652531 190.497511,100.944937 C189.777727,101.648245 188.231525,101.648245 189.457823,104.487529 C190.257583,106.33697 189.91102,112.927233 190.12429,119.335157 C190.577487,131.603986 190.097631,141.346114 192.870132,145.357578 C194.336358,147.493553 199.428161,143.742573 200.547825,142.25781 C202.067369,140.252078 205.02648,124.935578 204.999821,118.657896 L204.919845,113.552396 Z M192.3103,105.711807 C192.390276,105.477371 192.390276,105.399225 192.443593,105.295031 C192.630204,105.112692 192.816814,105.008498 193.136718,104.904304 C193.963137,104.64382 194.709579,104.669868 195.642632,104.956401 C196.86893,105.242934 197.562055,105.451322 198.121887,106.701649 C198.281839,107.144473 198.601743,108.55109 198.788354,110.009804 C199.26821,113.083524 199.401503,117.355473 199.401503,121.49718 C199.374844,127.592522 197.162176,137.204407 196.229122,138.376588 C195.909219,138.845461 195.322728,139.262236 194.736238,139.522721 C194.363016,139.757157 194.043112,139.679012 193.856502,139.600866 C193.803185,139.600866 193.563257,139.470624 193.563257,139.418527 C190.577487,136.058274 191.190636,116.704261 191.377247,116.652164 C192.523569,116.261437 191.377247,116.469825 191.377247,116.469825 C191.11066,111.416422 192.043713,107.248667 192.3103,105.711807 Z"
              fill="#BBDEFB"
            />
            <path
              d="M192.752243,106.198232 C193.576368,105.938424 194.081477,105.938424 195.06511,106.172251 C196.288005,106.458039 197.271637,106.691866 197.723577,107.990905 C197.936254,108.718367 198.228685,110.381137 198.494532,111.784098 C198.973056,114.84983 199.05281,119.2146 198.973056,123.371524 C198.919887,128.905429 196.739944,138.908028 195.570218,139.947259 C195.06511,140.362951 194.746094,140.570798 194.161231,140.934528 C193.789045,141.168355 193.177598,140.700701 193.177598,140.700701 C190.200115,137.349181 191.316671,123.709274 191.077409,119.084696 C191.077409,118.850869 191.02424,118.669004 191.050824,118.487138 L191.050824,118.253311 C190.784978,113.135099 191.635687,108.848271 191.901534,107.393347 C191.981288,107.15952 192.061042,106.79579 192.114211,106.743828 C192.247135,106.380097 192.486397,106.250193 192.752243,106.198232 Z"
              fill="#FFFFFF"
            />
            <path
              d="M183.742134,89.8776811 C167.279957,79.7443691 134.904343,74.7955424 115.019079,77.9376546 C112.667339,78.3304186 107.232208,79.6396321 103.939773,84.0909577 C97.3810324,92.9412405 83.5580301,133.23883 87.7911612,143.031746 C92.6252925,154.264797 120.219036,158.323359 120.219036,158.323359 C121.551689,158.63757 118.520558,163.717318 115.358775,166.152455 C110.94273,169.582594 107.911599,171.782073 108.773904,172.986549 C110.576904,175.395502 119.487384,175.474055 126.333559,174.112473 C135.217908,172.358127 147.943432,163.403107 147.943432,163.403107 C152.594651,163.612581 180.162264,168.14246 188.132048,158.742307 C197.957093,147.116492 200.72692,100.351388 183.742134,89.8776811 Z"
              fill="#BBDEFB"
            />
            <path
              d="M181.579929,137.915313 C171.092567,144.16766 117.34811,135.179912 113.18978,126.478729 C108.482236,116.57918 118.864985,95.5035617 124.801721,92.7681601 C136.361356,87.4536654 177.473904,95.2430473 184.01216,101.313034 C190.655027,107.513278 191.439617,132.053738 181.579929,137.915313 Z"
              fill="#FFFFFF"
            />
            <path
              d="M85.265849,103.514868 C82.6883803,111.634612 81.1737853,124.799633 82.4758055,127.742711 C83.4323919,129.923743 87.7636022,134.785078 90.9787951,133.891643 C97.5154684,132.131052 103.042412,125.35146 107.373622,110.215627 C109.632229,102.306104 110.535671,94.6593547 110.748246,92.5834331 C111.226539,88.6680875 111.013964,87.669543 110.190237,86.644721 C106.04503,81.7833858 95.6554394,82.1512706 92.4402465,85.5936215 C90.8725078,87.2491032 88.6670448,92.3732132 86.5944411,98.5221453 L85.265849,103.514868 Z M102.723549,105.354292 L102.643834,105.538234 L102.643834,105.590789 C102.564118,105.827287 102.510975,106.063784 102.431259,106.379114 C100.677518,112.160161 96.0274452,123.643423 91.3508009,126.954387 C91.1116543,126.928109 90.7927922,126.744167 90.3676427,126.350005 C89.7830622,125.7719 89.1187661,124.957298 88.6670448,124.247806 C87.4978838,122.539769 88.4013264,115.94412 90.0753525,108.980585 C91.3508009,103.80392 93.024827,98.4695903 94.539422,94.7119096 C95.2302899,93.0301504 96.0274452,91.6899986 96.5854539,90.796564 C97.5154684,89.2987472 99.1629226,89.0096948 100.783805,88.9308624 C102.032682,88.9308624 103.334702,89.0359723 104.238145,89.6403545 C104.530435,89.824297 104.769581,90.0345169 104.955584,90.3498467 C105.008728,90.4812341 105.061872,90.9805064 105.0353,91.2695588 C104.849297,93.3980353 104.61015,99.0476951 102.723549,105.354292 Z"
              fill="#BBDEFB"
            />
            <path
              d="M103.217842,89.7125 C102.304328,89.1055556 100.987795,89 99.7249972,89 C98.0860471,89.0527778 96.3664928,89.3430556 95.4798477,90.8736111 C94.942487,91.7180556 94.190182,93.0375 93.411009,94.8055556 C91.8795311,98.5 90.1868449,103.883333 88.8971792,109.134722 C87.2044931,116.101389 86.371584,122.698611 87.5537775,124.413889 C88.0374021,125.1 88.682235,125.918056 89.3001998,126.498611 C89.7300883,126.894444 89.8912965,126.973611 90.1868449,127 L90.294317,127 C95.0230911,123.675 99.563789,112.301389 101.390815,106.522222 C101.471419,106.205556 101.552024,105.968056 101.60576,105.730556 L101.60576,105.677778 L101.686364,105.493056 C103.593994,99.1597222 103.916411,93.4861111 103.997015,91.5597222 C103.997015,91.2430556 104.023883,90.7680556 103.916411,90.6361111 C103.835806,90.1083333 103.51339,89.9236111 103.217842,89.7125 Z"
              fill="#FFFFFF"
            />
            <path
              d="M166.187151,118.831094 C165.897034,121.967495 168.32347,124.6992 171.567509,124.977429 C174.837923,125.255658 177.686348,122.928651 177.976465,119.817542 C178.266582,116.681141 175.840146,113.949436 172.596107,113.671207 C169.352068,113.392977 166.477269,115.719985 166.187151,118.831094 Z M147.11853,115.517637 C146.93391,117.541122 147.883385,119.488726 149.624089,120.65223 C151.364793,121.815734 153.606609,121.992789 155.531933,121.158101 C157.457257,120.29812 158.749598,118.527571 158.934218,116.504086 C159.224335,113.367684 156.7979,110.635979 153.55386,110.35775 C150.257072,110.079521 147.382273,112.381235 147.11853,115.517637 Z M128.023535,112.178886 C127.733418,115.315288 130.159854,118.046993 133.403893,118.325222 C136.674306,118.603451 139.522731,116.276444 139.812849,113.165335 C140.102966,110.028934 137.67653,107.297229 134.432491,107.019 C131.188451,106.766064 128.313652,109.067778 128.023535,112.178886 Z"
              fill="#BBDEFB"
            />
          </g>
        </g>
      </g>
    </SvgIcon>
  );
}

class NoData extends React.Component {
  static propTypes = {
    classes: PropTypes.object.isRequired,
    colSpan: PropTypes.number,
    visible: PropTypes.bool,
    text: PropTypes.any,
    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  };

  static defaultProps = {
    colSpan: 1, // 列数
    visible: false,
    text: '',
    size: 'md',
  };

  state = {
    sizes: ['xs', 'sm', 'md', 'lg', 'xl'],
  };

  render() {
    const { sizes } = this.state;
    const { classes, colSpan, visible, size, text, ...rest } = this.props;
    const itemClassName = classnames(
      {
        [classes[size]]: sizes.includes(size),
      },
      classes.item,
    );

    return (
      visible && (
        <TableRow>
          <TableCell colSpan={colSpan} className={classes.td} {...rest}>
            <Grid container direction="column" spacing={24} justify="center" alignItems="center">
              <Grid item className={itemClassName}>
                <Icon classes={{ root: classes.iconRoot }} />
              </Grid>
              <Grid item className={classes.text}>
                {text}
              </Grid>
            </Grid>
          </TableCell>
        </TableRow>
      )
    );
  }
}

const TableNoData = withStyles(
  theme => ({
    td: {
      padding: '10px',
    },
    item: {},
    text: {
      textAlign: 'center',
    },
    iconRoot: {
      width: '100%',
      height: '100%',
    },
    xs: {
      width: '150px',
    },
    sm: {
      width: '200px',
    },
    md: {
      width: '250px',
    },
    lg: {
      width: '300px',
    },
    xl: {
      width: '350px',
    },
  }),
  { withTheme: true },
)(NoData);

const styles = theme => ({
  root: {
    width: '100%',
  },
  table: {
    marginTop: theme.spacing.unit * 3,
  },
  tableBox: {
    height: 300,
    width: '100%',
  },
});

const columns = [
  { title: 'Name', width: 100, dataIndex: 'name', key: 'name' },
  { title: 'Age', width: 100, dataIndex: 'age', key: 'age', fixed: 'left' },
  {
    title: 'Column 1',
    dataIndex: 'address',
    key: '1',
    width: 150,
    resizable: true,
  },
  {
    title: 'Column 2',
    dataIndex: 'address',
    key: '2',
    width: 150,
  },
  { title: 'Column 3', dataIndex: 'address', key: '3', width: 150 },
  { title: 'Gender', dataIndex: 'gender', key: '4', width: 150 },
  { title: 'Column 5', dataIndex: 'address', key: '5', width: 150 },
  { title: 'Column 6', dataIndex: 'address', key: '6', width: 150 },
  { title: 'Column 7', dataIndex: 'address', key: '7', width: 150 },
  { title: 'Column 8', dataIndex: 'address', key: '8', width: 150 },
  {
    title: 'Action',
    key: 'operation',
    fixed: 'right',
    width: 100,
    render: () => <a href="javascript:;">action</a>,
  },
];

class NoDataTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      columns: columns,
      data: [],
      value: 'dragable',
      TablePaginationProps: {
        rowsPerPage: 5,
        page: 0,
      },
    };
  }
  componentDidMount = () => {};
  render() {
    const { classes } = this.props;
    const { data, columns } = this.state;
    const PaginationProps = {
      ...this.state.TablePaginationProps,
    };
    const exportProps = {
      type: 'csv',
    };
    const SearchProps = {
      placeholder: 'search',
      isDark: true,
    };
    const options = {
      TablePaginationProps: PaginationProps,
      exportProps,
      SearchProps,
    };
    return (
      <div className={classes.root}>
        <Paper className={classes.tableBox}>
          {/* <Divider></Divider> */}
          <AwesomeTable
            title={'Table No Data'}
            columns={columns}
            data={this.state.data}
            searchable
            paginatable
            sync
            NoData={TableNoData}
            {...options}
          />
        </Paper>
      </div>
    );
  }
}

NoDataTable.propTypes = {
  classes: PropTypes.object.isRequired,
};

export default withStyles(styles)(NoDataTable);
